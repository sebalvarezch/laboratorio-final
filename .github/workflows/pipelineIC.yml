name: Workflow
on: 
  push:
    branches:
      - pipe
jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set node
        uses: actions/setup-node@v3
        with:
         node-version: 18
      
      - name: Dependencies
        run: npm install
    
      - name: SC Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR }}
        with:
          args: |
            -Dsonar.projectKey=sebalvarezch_laboratorio-final
            -Dsonar.organization=sebalvarezch
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.branch.name=main

   #  - name: Chequeo de calidad
   #    uses: sonarsource/sonarqube-quality-gate-action@master
    #   env: 
    #     SONAR_TOKEN: ${{ secrets.SONAR }}

  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@1.1.0
      env:
        JAVA_HOME: /opt/jdk
      with:
        project: ${{github.event.repository.name}}
        path: '.'
        format: 'HTML'
        args: >
          --failOnCVSS 7
          --enableRetired

    - name: Subir reporte
      uses: actions/upload-artifact@master
      with:
        name: dependency-check-report
        path: ${{github.workspace}}/reports

   # - name: Verificar vulnerabilidades bloqueantes
    #  run: |
     #   echo "Escaneando reporte generado..."
      #  if grep -E 'CVSS [7-9]\.|CRITICAL|HIGH' reports/dependency-check-report.html; then
       #   echo " Vulnerabilidades criticas, altas o medias detectadas"
        #  exit 1
       # else
        #  echo "No se encontraron vulnerabilidades bloqueantes"
        #fi

  Docker:
    needs: SCA
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t laboratorio-final:latest .
        docker tag laboratorio-final:latest ${{secrets.DOCKERHUB_USERNAME}}/laboratorio-final:latest

    - name: Login
      uses: docker/login-action@v3
      with:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_TOKEN}}

    - name: push
      run: |
        docker push ${{secrets.DOCKERHUB_USERNAME}}/laboratorio-final:latest

  DockerScan:
    needs: Docker
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Pull
      run: |
        docker pull ${{secrets.DOCKERHUB_USERNAME}}/laboratorio-final:latest

    - name: Run Trivy Scan 
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{secrets.DOCKERHUB_USERNAME}}/laboratorio-final:latest
        format: 'table'
        #exit-code: '1'
        #severity: 'CRITICAL,HIGH,MEDIUM'
  
  DAST:
    needs: DockerScan
    runs-on: self-hosted
    steps:

      - name: Despliegue app
        run: |
          docker run -p 3000:3000 --name laboratorio-final-deploy -d ${{secrets.DOCKERHUB_USERNAME}}/laboratorio-final:latest

      - name: Sleep
        run: |
          sleep 30

      - name: Ejecutar ZAP como contenedor
        run: |
          docker run --network="host" `
            -v ${PWD}:/zap/wrk/:rw `
            ghcr.io/zaproxy/zaproxy:stable `
            zap-baseline.py -t http://localhost:3000 -r zap_report.html
        continue-on-error: true

      - name: Subir artefacto del reporte
        uses: actions/upload-artifact@master
        with:
          name: zap-report
          path: zap_report.html





